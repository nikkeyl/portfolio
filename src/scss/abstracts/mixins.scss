@use "variables" as *;
@use "functions" as *;

@mixin adaptive-value(
	$property,
	$start-size,
	$min-size,
	$keep-size: 2,
	$inline-size-from: $container-inline-size,
	$inline-size-to: $min-inline-size
) {
	@if $start-size == 0 {
		$start-size: 0.000001;
	}

	@if $min-size == 0 {
		$min-size: 0.000001;
	}

	@if $inline-size-from == $container-inline-size and $container-max-inline-size == 0
	{
		$inline-size-from: $max-inline-size;
	}

	$slope: decimal-round(
		($start-size - $min-size),
		($inline-size-from - $inline-size-to)
	);
	$y-intersection: -$inline-size-to * $slope + $min-size;

	@if $y-intersection == 0 {
		$y-intersection: 0.000001;
	}

	$fly-value: #{to-rem($y-intersection)}" + " #{$slope * 100}vw;
	$property-value: #{"clamp(" to-rem($min-size) "," $fly-value ","
		to-rem($start-size) ")"};

	@if $min-size > $start-size {
		$property-value: #{"clamp("
			to-rem($start-size)
			","
			$fly-value
			","
			to-rem($min-size)
			")"};
	}

	@if $keep-size != 1 and $keep-size != 3 {
		@include media-min($inline-size-from) {
			#{$property}: to-rem($start-size);
		}
	}

	@include media-min-max($inline-size-to, $inline-size-from) {
		#{$property}: $property-value;
	}

	@if $keep-size != 1 and $keep-size != 2 {
		@include media-max($inline-size-to) {
			#{$property}: to-rem($min-size);
		}
	}
}

@mixin responsive-output($body-inline-size, $breakpoint: $tablet, $reverse: 0) {
	$body-max-inline-size: decimal-round($body-inline-size, $container-max-inline-size) *
		100;
	$image-inline-size: $body-inline-size - ($body-inline-size - $body-max-inline-size);

	@if $image-inline-size <= 10 {
		$image-inline-size: 0 + $image-inline-size;
	}

	&__inner {
		display: flex;
		flex: 0 0 100%;
	}

	&__container {
		flex-basis: 100%;

		@if $reverse == 1 {
			display: flex;
			flex-direction: row-reverse;
		}
	}

	&__body {
		@include media-min($breakpoint) {
			inline-size: $body-max-inline-size + 0%;
		}
	}

	&__image {
		@include media-min($breakpoint) {
			flex: 0 0 calc(
				(
						(
								100% -
									var(
										--container-padding-inline,
										#{to-rem($container-padding-inline)}
									)
							) * decimal-round(decimal-round((100 - $body-max-inline-size), 1), 100)
					) +
					(var(--container-padding-inline, #{to-rem($container-padding-inline)}) / 2)
			);
			aspect-ratio: 16 / 9;

			img {
				object-position: center;
			}

			@if $reverse == 1 {
				transform: translateX(100%);
			} @else {
				transform: translateX(-100%);
			}
		}

		@include media-min($container-inline-size) {
			flex: 0 0 calc(
				50% - (decimal-round($image-inline-size, 100) - 0.5) *
					to-rem($container-max-inline-size)
			);
		}
	}

	@include media-min($breakpoint) {
		display: flex;

		@if $reverse == 1 {
			flex-direction: row-reverse;
		}
	}

	@include media-max($breakpoint) {
		@if $reverse == 1 {
			display: flex;
			flex-direction: column-reverse;
		}
	}
}

@mixin slide(
	$items,
	$translate,
	$time,
	$animation-delay,
	$direction,
	$breakpoint: $tablet
) {
	$count: $items + 1;

	@include media-min($breakpoint) {
		opacity: 0;
		animation: slide-#{$direction} #{$time}s forwards;

		@if $direction == top {
			translate: 0 #{$translate} + "%";
		} @else if $direction == bottom {
			translate: 0 0;
		} @else if $direction == left {
			translate: #{$translate} + "%" 0;
		} @else {
			translate: 0 0;
		}

		@keyframes slide-#{$direction} {
			100% {
				opacity: 1;

				@if $direction == top {
					translate: 0 0;
				} @else if $direction == bottom {
					translate: 0 #{$translate} + "%";
				} @else if $direction == left {
					translate: 0 0;
				} @else {
					translate: #{$translate} + "%" 0;
				}
			}
		}

		@for $i from 2 through $count {
			$delay: ($i - 1) * $animation-delay;

			&:nth-child(#{$i}) {
				animation-delay: $delay;
			}
		}
	}
}

@mixin marquee(
	$gap: 20,
	$speed: 30s,
	$timing-function: linear,
	$pause-on-hover: 1,
	$reverse: 0
) {
	.marquee-wrapper {
		display: flex;
		gap: to-rem($gap);
		user-select: none;

		@if $pause-on-hover == 1 {
			@include media-hover {
				.marquee {
					animation-play-state: paused;
				}
			}
		}

		.marquee {
			display: flex;
			gap: to-rem($gap);
			animation: scroll $speed $timing-function infinite;
			will-change: transform;

			@if $reverse == 1 {
				animation-direction: reverse;
			}

			@keyframes scroll {
				100% {
					transform: translateX(-100%);
				}
			}
		}
	}
}

@mixin grid($type: fit, $min: to-rem(290), $max: 1fr, $breakpoint: $phone) {
	display: grid;
	grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));

	@content;
}

@mixin media-min-max($min-inline-size: 320, $max-inline-size: $tablet) {
	@media only screen and (min-width: to-em($min-inline-size)) and (max-width: to-em($max-inline-size - 0.02)) {
		@content;
	}
}

@mixin media-min($breakpoint) {
	@media only screen and (min-width: to-em($breakpoint)) {
		@content;
	}
}

@mixin media-max($breakpoint) {
	@media only screen and (max-width: to-em($breakpoint - 0.02)) {
		@content;
	}
}

@mixin media-hover {
	@media (any-hover: hover) {
		&:hover {
			@content;
		}
	}
}

@mixin media-motion($motion-type) {
	@media only screen and (prefers-reduced-motion: $motion-type) {
		@content;
	}
}

@mixin pseudo($content: "", $position: absolute) {
	content: $content;
	position: $position;
}
