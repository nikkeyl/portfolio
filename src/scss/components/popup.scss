@use "@scss/abstracts" as *;
@use "@scss/utilities/placeholders" as *;

.popup {
	position: fixed;
	inset: 0;
	padding-inline: to-rem($container-padding-inline);
	pointer-events: none;

	&__wrapper {
		justify-content: center;
		min-block-size: 100%;
	}

	&__content {
		position: relative;
		inline-size: max(20rem);
		padding: to-rem(30);
		background-color: var(--color-pale, #{$color-pale});
		opacity: 0;
		scale: 0;
		will-change: scale;
		transition-property: opacity, scale;
		transition-duration: var(
			--transition-duration-default,
			#{$transition-duration-default}
		);

		.lock & {
			opacity: 1;
		}
	}

	&__icon {
		$size: 150;
		$rotate: 3deg;

		block-size: to-rem($size);
		inline-size: to-rem($size);
		animation: drag
			var(--transition-duration-default, #{$transition-duration-default}) infinite;

		svg {
			fill: transparent;
			stroke: var(--color-accent, #{$color-accent});

			@extend %box-shadow-accent;
		}

		@keyframes drag {
			0% {
				rotate: $rotate;
			}

			50% {
				rotate: -$rotate;
			}

			100% {
				rotate: $rotate;
			}
		}
	}

	&__text {
		text-align: center;

		span {
			@extend %color-accent;
		}
	}

	&__close {
		$inset: 15;
		$size: 30;
		$rotate: 45deg;

		position: absolute;
		inset-block-start: to-rem($inset);
		inset-inline-end: to-rem($inset);
		block-size: to-rem($size);
		inline-size: to-rem($size);

		&::before,
		&::after {
			$block-size: 2;

			@include pseudo;

			inset-block: calc(50% - to-rem($block-size));
			inset-inline-end: 0;
			border-radius: to-rem(2);
			block-size: to-rem($block-size);
			inline-size: 100%;

			@extend %bg-color-secondary;
		}

		&::before {
			rotate: -$rotate;
		}

		&::after {
			rotate: $rotate;
		}
	}

	&--show {
		z-index: var(--z-index-3, #{$z-index-3});
		overflow-block: auto;
		pointer-events: auto;

		.popup__content {
			opacity: 1;
			scale: 1;
		}
	}
}
